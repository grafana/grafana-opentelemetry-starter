plugins {
    id 'java'
    id 'maven-publish'
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
    id 'signing'
    id 'org.springframework.boot' version '3.1.3'
    id 'io.spring.dependency-management' version '1.1.3'
    id "com.diffplug.spotless" version "6.22.0"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

group = "com.grafana"
version = project.properties['grafanaOtelStarterVersion']

repositories {
    mavenCentral()
    maven {
        url = uri("https://s01.oss.sonatype.org/content/repositories/snapshots")
        mavenContent {
            snapshotsOnly()
        }
    }
}

test {
    useJUnitPlatform()
}

java {
    withJavadocJar()
    withSourcesJar()
}

jar {
    // allows maven to read the artifact (by default, it's "plain")
    archiveClassifier.set('')
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    def otelVersion = dependencyManagement.importedProperties['opentelemetry.version']
    implementation "io.opentelemetry:opentelemetry-exporter-otlp"
    implementation "io.opentelemetry:opentelemetry-exporter-otlp-logs:$otelVersion-alpha"
    implementation "io.opentelemetry:opentelemetry-exporter-logging" // only for debug
    implementation "io.opentelemetry.instrumentation:opentelemetry-logback-appender-1.0:$otelVersion-alpha"
    implementation "io.opentelemetry.instrumentation:opentelemetry-log4j-appender-2.17:$otelVersion-alpha"
    compileOnly 'org.springframework.boot:spring-boot-starter-log4j2'

    runtimeOnly "io.opentelemetry.instrumentation:opentelemetry-resources:$otelVersion-alpha"
    implementation "io.opentelemetry.instrumentation:opentelemetry-micrometer-1.5:$otelVersion-alpha"
    implementation "io.opentelemetry:opentelemetry-sdk-extension-autoconfigure:$otelVersion-alpha"
    runtimeOnly "io.micrometer:micrometer-tracing-bridge-otel"

    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.boot:spring-boot-starter-web"
}

spotless {
  java {
    googleJavaFormat()
    target("src/**/*.java")
  }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                name = 'Grafana OpenTelemetry Starter'
                description = 'Spring boot starter to use Metrics, Traces, and Logs with OpenTelemetry in Grafana Cloud or with Grafana Agent (for Grafana Cloud or Grafana OSS stack)'
                url = 'https://github.com/grafana/grafana-opentelemetry-starter'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = "zeitlinger"
                        name = "Gregor Zeitlinger"
                        email = "gregor.zeitlinger@grafana.com"
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/grafana/grafana-opentelemetry-starter.git'
                    developerConnection = 'scm:git:ssh://github.com/grafana/grafana-opentelemetry-starter.git'
                    url = 'https://github.com/grafana/grafana-opentelemetry-starter'
                }
            }
        }
    }
    repositories {
        maven {
            name = 'OSSRH'
            url = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'

            credentials {
                username = System.getenv('OSSRH_USERNAME')
                password = System.getenv('OSSRH_PASSWORD')
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))

            username = System.getenv("OSSRH_USERNAME")
            password = System.getenv("OSSRH_PASSWORD")
        }
    }
}

if (gradle.startParameter.taskNames.contains("publishToSonatype")) {
    signing {
        sign publishing.publications.mavenJava
        useInMemoryPgpKeys(System.getenv("SIGNING_KEY"), System.getenv("SIGNING_PASSWORD"))
    }
}
